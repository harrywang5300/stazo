package com.stazo.project_18;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.GenericTypeIndicator;
import com.firebase.client.MutableData;
import com.firebase.client.Transaction;
import com.firebase.client.ValueEventListener;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by ericzhang on 4/25/16.
 */
public class User {
    private String ID; // generated by facebook api
    private String name;
    private int explorerLevel;
    private ArrayList<String> myEvents = new ArrayList<String>();
    private ArrayList<String> attendingEvents = new ArrayList<String>();
    private ArrayList<String> reportedEvents = new ArrayList<String>();
    private ArrayList<Integer> categoryTrails = new ArrayList<Integer>();
    private ArrayList<String> userTrails = new ArrayList<String>();
    private ArrayList<String> friends = new ArrayList<String>();
    //private ArrayList<String> tagTrails = new ArrayList<String>();

    public int getExplorerLevel() {
        return explorerLevel;
    }

    public void setExplorerLevel(int explorerLevel) {
        this.explorerLevel = explorerLevel;
    }

    public ArrayList<Integer> getCategoryTrails() {
        return categoryTrails;
    }

    public void setCategoryTrails(ArrayList<Integer> categoryTrails) {
        this.categoryTrails = categoryTrails;
    }

    public ArrayList<String> getUserTrails() {
        return userTrails;
    }

    public void setUserTrails(ArrayList<String> userTrails) {
        this.userTrails = userTrails;
    }
    // can add further stuff later such as event host list, rating, history, upcoming event lists

    public void addTrail(Firebase fb, Integer type) {
        if (categoryTrails.contains(type)) {
            return;
        }
        categoryTrails.add(type);
        fb.child("Users").child(ID).child("categoryTrails").setValue(categoryTrails);
    }

    public void addTrail(Firebase fb, String user_id) {
        if (userTrails.contains(user_id)) {
            return;
        }
        userTrails.add(user_id);
        fb.child("Users").child(ID).child("userTrails").setValue(userTrails);
    }
    /**
     * Default constructor for firebase
     */
    public User() {
    }

    // for new users
    public User(String user_id, String name) {
        this.ID = user_id;
        this.name = name;
    }

    // constructor with HashMap for existing users
    public User(HashMap<String, Object> userMap) {
        this.name = (String) userMap.get("name");
        System.out.println(name + '\n');
        this.ID = (String) userMap.get("id");

        // remove this after all users have myEvents reference in firebase
        if (userMap.containsKey("myEvents")) {
            myEvents.clear();

            // if stored as ArrayList (from user.pushToFirebase)
            if (userMap.get("myEvents") instanceof ArrayList) {
                for (String val: (ArrayList<String>) userMap.get("myEvents")) {
                    myEvents.add(val);
                }
            }

            // if stored as HashMap (from event.pushToFirebase, firebase "push" method)
            else {
                for (String val : ((HashMap<String, String>) userMap.get("myEvents")).values()) {
                    myEvents.add(val);
                }
            }
        }
        if (userMap.containsKey("reportedEvents")) {
            reportedEvents.clear();

            // if stored as ArrayList (from user.pushToFirebase)
            if (userMap.get("reportedEvents") instanceof ArrayList) {
                for (String val: (ArrayList<String>) userMap.get("reportedEvents")) {
                    reportedEvents.add(val);
                }
            }

            // if stored as HashMap (from event.pushToFirebase, firebase "push" method)
            else {
                for (String val : ((HashMap<String, String>) userMap.get("reportedEvents")).values()) {
                    reportedEvents.add(val);
                }
            }
        }
        if (userMap.containsKey("attendingEvents")) {
            attendingEvents.clear();

            // if stored as ArrayList (from user.pushToFirebase)
            if (userMap.get("attendingEvents") instanceof ArrayList) {
                for (String val: (ArrayList<String>) userMap.get("attendingEvents")) {
                    attendingEvents.add(val);
                }
            }

            // if stored as HashMap (from event.pushToFirebase, firebase "push" method)
            else {
                for (String val : ((HashMap<String, String>) userMap.get("attendingEvents")).values()) {
                    attendingEvents.add(val);
                }
            }
        }
        if (userMap.containsKey("categoryTrails")) {
            categoryTrails.clear();

            // if stored as ArrayList (from user.pushToFirebase)
            if (userMap.get("categoryTrails") instanceof ArrayList) {
                for (Long val: (ArrayList<Long>) userMap.get("categoryTrails")) {
                    categoryTrails.add(new Integer(val.intValue()));
                }
            }

            // if stored as HashMap (from event.pushToFirebase, firebase "push" method)
            else {
                for (Long val : ((ArrayList<Long>) userMap.get("categoryTrails"))) {
                    categoryTrails.add(val.intValue());
                }
            }
        }
        if (userMap.containsKey("userTrails")) {
            userTrails.clear();

            // if stored as ArrayList (from user.pushToFirebase)
            if (userMap.get("userTrails") instanceof ArrayList) {
                for (String val: (ArrayList<String>) userMap.get("userTrails")) {
                    userTrails.add(val);
                }
            }

            // if stored as HashMap (from event.pushToFirebase, firebase "push" method)
            else {
                for (String val : ((ArrayList<String>) userMap.get("userTrails"))) {
                    userTrails.add(val);
                }
            }
        }

        // test trails
        addTrail(new Firebase("https://stazo-project-18.firebaseio.com/"), new Integer(0));
        addTrail(new Firebase("https://stazo-project-18.firebaseio.com/"), "10209766334938822");
        addTrail(new Firebase("https://stazo-project-18.firebaseio.com/"), new Integer(2));
        addTrail(new Firebase("https://stazo-project-18.firebaseio.com/"), "1070949549640758");
    }

    /**
     * Pushes the user's info onto Firebase
     */
    public void pushToFirebase(Firebase fb) {fb.child("Users").child(ID).setValue(this);}

    // true for successful report, false for unsuccessful report
    public boolean reportEvent(String event_id, Firebase fb) {
        if (reportedEvents.contains(event_id)) {
            return false;
        }
        // increment reports
        fb.child("Events").child(event_id).child("reports").runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData currentData) {
                if (currentData.getValue() == null) {
                    currentData.setValue(1);
                } else {
                    currentData.setValue((Long) currentData.getValue() + 1);
                }
                return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
            }

            @Override
            public void onComplete(FirebaseError firebaseError, boolean committed, DataSnapshot currentData) {
                //This method will be called once with the results of the transaction.
            }
        });

        // user-stuff
        reportedEvents.add(event_id);
        fb.child("Users").child(ID).child("reportedEvents").setValue(reportedEvents);
        return true;
    }

    // true for successful attend, false for unsuccessful attend
    public boolean attendEvent(String event_id, Firebase fb) {
        if (attendingEvents.contains(event_id)) {
            return false;
        }

        // increment popularity
        fb.child("Events").child(event_id).child("popularity").runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData currentData) {
                if (currentData.getValue() == null) {
                    currentData.setValue(1);
                } else {
                    currentData.setValue((Long) currentData.getValue() + 1);
                }
                return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
            }

            @Override
            public void onComplete(FirebaseError firebaseError, boolean committed, DataSnapshot currentData) {
                //This method will be called once with the results of the transaction.
            }
        });

        // update event's attendees
        fb.child("Events").child(event_id).child("attendees").push().setValue(ID);

        // update user's attending events
        attendingEvents.add(event_id);
        fb.child("Users").child(ID).child("attendingEvents").setValue(attendingEvents);
        return true;
    }

    // true for successful unattend, false for unsuccessful unattend
    public boolean unattendEvent(String event_id, final Firebase fb) {
        if (!(attendingEvents.contains(event_id))) {
            return false;
        }

        // decrement popularity
        fb.child("Events").child(event_id).child("popularity").runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData currentData) {
                if (currentData.getValue() == null) {
                    return Transaction.abort();
                } else {
                    currentData.setValue((Long) currentData.getValue() - 1);
                }
                return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
            }

            @Override
            public void onComplete(FirebaseError firebaseError, boolean committed, DataSnapshot currentData) {
                //This method will be called once with the results of the transaction.
            }
        });

        // update event's attending
        fb.child("Events").child(event_id).child("attendees").addListenerForSingleValueEvent(
                new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot dataSnapshot) {

                        for (DataSnapshot eventSnapshot : dataSnapshot.getChildren()) {
                            // if the ID is ours, remove it and return
                            if (eventSnapshot.getValue() == ID) {
                                eventSnapshot.getRef().setValue(null);
                                return;
                            }
                        }
                        // remove this listener
                        fb.child("Events").removeEventListener(this);
                    }

                    @Override
                    public void onCancelled(FirebaseError firebaseError) {
                    }
                });

        // update user's attendingEvents
        attendingEvents.remove(event_id);
        fb.child("Users").child(ID).child("attendingEvents").setValue(attendingEvents);
        return true;
    }


    //Getters and setters
    public String getID() {return this.ID;}

    public String getName() {return this.name;}

    public ArrayList<String> getMyEvents() {return this.myEvents;}

    public void setAttendingEvents(ArrayList<String> attendingEvents) {
        this.attendingEvents = attendingEvents;
    }

    public void setReportedEvents(ArrayList<String> reportedEvents) {
        this.reportedEvents = reportedEvents;
    }

    public ArrayList<String> getAttendingEvents() {return attendingEvents;}

    public ArrayList<String> getReportedEvents() {return reportedEvents;}

    public void setMyEvents(ArrayList<String> events) { myEvents = events; }

    public void setID(String user_id) {this.ID = user_id;}

    public void setName(String name) {this.name = name;}

    public void addEvent(String a) {myEvents.add(a);}

}
