package com.stazo.project_18;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.MutableData;
import com.firebase.client.Transaction;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by ericzhang on 4/25/16.
 */
public class User {
    private String ID; // generated by facebook api
    private String name;
    private ArrayList<String> myEvents = new ArrayList<String>();
    private ArrayList<String> attendingEvents = new ArrayList<String>();
    private ArrayList<String> reportedEvents = new ArrayList<String>();
    // can add further stuff later such as event host list, rating, history, upcoming event lists

    /**
     * Default constructor for firebase
     */
    public User() {
    }

    // for new users
    public User(String user_id, String name) {
        this.ID = user_id;
        this.name = name;
    }

    // for existing users
    public User(String user_id, String name, ArrayList<String> myEvents) {
        this.ID = user_id;
        this.name = name;
        this.myEvents = myEvents;
    }

    // constructor with HashMap
    public User(HashMap<String, Object> userMap) {
        this.name = (String) userMap.get("name");
        System.out.println(name + '\n');
        this.ID = (String) userMap.get("id");

        // remove this after all users have myEvents reference in firebase
        if (userMap.containsKey("myEvents")) {
            myEvents.clear();
            for (String val: ((HashMap<String, String>) userMap.get("myEvents")).values()) {
                myEvents.add(val);
            }
        }
        if (userMap.containsKey("reportedEvents")) {
            reportedEvents.clear();
            for (String val: ((HashMap<String, String>) userMap.get("reportedEvents")).values()) {
                reportedEvents.add(val);
            }
        }
        if (userMap.containsKey("attendingEvents")) {
            attendingEvents.clear();
            for (String val: ((HashMap<String, String>) userMap.get("attendingEvents")).values()) {
                attendingEvents.add(val);
            }
        }
    }

    /**
     * Pushes the user's info onto Firebase
     */
    private void pushToFirebase(Firebase fb) {
        Firebase userRef = fb.child("Users").child(ID);
        userRef.setValue(this); // set the value for the user_id child to this user
    }

    // true for successful report, false for unsuccessful report
    public boolean reportEvent(String event_id, Firebase fb) {
        if (reportedEvents.contains(event_id)) {
            return false;
        }
        // increment reports
        fb.child("Events").child(event_id).child("reports").runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData currentData) {
                if (currentData.getValue() == null) {
                    currentData.setValue(1);
                } else {
                    currentData.setValue((Long) currentData.getValue() + 1);
                }
                return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
            }

            @Override
            public void onComplete(FirebaseError firebaseError, boolean committed, DataSnapshot currentData) {
                //This method will be called once with the results of the transaction.
            }
        });

        // user-stuff
        reportedEvents.add(event_id);
        fb.child("Users").child(ID).child("reportedEvents").setValue(reportedEvents);
        return true;
    }

    // true for successful attend, false for unsuccessful attend
    public boolean attendEvent(String event_id, Firebase fb) {
        if (attendingEvents.contains(event_id)) {
            return false;
        }

        // increment popularity
        fb.child("Events").child(event_id).child("popularity").runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData currentData) {
                if (currentData.getValue() == null) {
                    currentData.setValue(1);
                } else {
                    currentData.setValue((Long) currentData.getValue() + 1);
                }
                return Transaction.success(currentData); //we can also abort by calling Transaction.abort()
            }

            @Override
            public void onComplete(FirebaseError firebaseError, boolean committed, DataSnapshot currentData) {
                //This method will be called once with the results of the transaction.
            }
        });

        // user-stuff
        attendingEvents.add(event_id);
        fb.child("Users").child(ID).child("attendingEvents").setValue(attendingEvents);
        return true;
    }


    //Getters and setters
    public String getID() {
        return this.ID;
    }

    public String getName() {
        return this.name;
    }

    public ArrayList<String> getMyEvents() {
        return this.myEvents;
    }

    public void setAttendingEvents(ArrayList<String> attendingEvents) {
        this.attendingEvents = attendingEvents;
    }

    public void setReportedEvents(ArrayList<String> reportedEvents) {
        this.reportedEvents = reportedEvents;
    }

    public ArrayList<String> getAttendingEvents() {

        return attendingEvents;
    }

    public ArrayList<String> getReportedEvents() {
        return reportedEvents;
    }

    public void setMyEvents(ArrayList<String> events) { myEvents = events; }

    public void setID(String user_id) {
        this.ID = user_id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void addEvent(String a) {
        myEvents.add(a);
    }

}
